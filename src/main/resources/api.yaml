openapi: 3.0.3
info:
  title: MyTasks API
  version: 1.0.0
  description: API for MyTasks application
tags:
  - name: User
    description: User management APIs
  - name: Task
    description: Task management APIs
paths:
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'


    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /user/{id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - User
      summary: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /user/{id}/task:
    get:
      tags:
        - User
      summary: Get tasks of a user by user's ID
      operationId: getUserTasks
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve the tasks
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDTO'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /task:
    post:
      tags:
        - Task
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDTO'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /task/{id}:
    get:
      tags:
        - Task
      summary: Get a task by ID
      operationId: getTask
      parameters:
        - name: id
          in: path
          description: ID of the task to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Task
      summary: Delete task by ID
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of the task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  responses:
    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TaskNotFound:
      description: Task not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'


  schemas:
    UserRequestDTO:
      type: object
      required:
        - name
        - lastName
        - username
        - password
      properties:
        name:
          type: string
          pattern: ".*\\S+.*"
          description: User's first name
        lastName:
          type: string
          pattern: ".*\\S+.*"
          description: User's last name
        username:
          type: string
          pattern: ".*\\S+.*"
          description: User's username
        password:
          type: string
          description: User's password
          format: password

    UserResponseDTO:
      type: object
      required:
        - id
        - name
        - lastName
        - username
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        username:
          type: string
          description: User's username

    TaskDTO:
      type: object
      required:
        - title
        - description
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          pattern: ".*\\S+.*"
        description:
          type: string
          pattern: ".*\\S+.*"
        completed:
          type: boolean
        date:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64

    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string