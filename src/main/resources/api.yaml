openapi: 3.0.3
info:
  title: MyTasks API
  version: 1.0.0
  description: API for MyTasks application
tags:
  - name: User
    description: User management APIs
  - name: Task
    description: Task management APIs
  - name: Auth
    description: Authentication APIs
paths:
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/{id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User
      summary: Update user by ID (full replacement)
      description: Replaces the entire user resource. Clients should send a complete representation.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '409':
          $ref: '#/components/responses/UsernameAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - User
      summary: Partially update user by ID
      description: Applies a partial update. Only provided fields will be changed.
      operationId: patchUser
      parameters:
        - name: id
          in: path
          description: ID of the user to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '409':
          $ref: '#/components/responses/UsernameAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - User
      summary: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /task:
    post:
      tags:
        - Task
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDTO'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Task
      summary: Get all tasks
      operationId: getAllTasks
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDTO'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /task/by-user:
    get:
      tags:
        - Task
      summary: Get tasks by user identifier
      description: Retrieve tasks linked to a user, identified by either userId or username. At least one parameter must be provided.
      operationId: getTasksByUser
      parameters:
        - name: userId
          in: query
          description: ID of the user whose tasks to retrieve
          required: false
          schema:
            type: integer
            format: int64
        - name: username
          in: query
          description: Username of the user whose tasks to retrieve
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /task/{id}:
    get:
      tags:
        - Task
      summary: Get a task by ID
      operationId: getTask
      parameters:
        - name: id
          in: path
          description: ID of the task to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Task
      summary: Update task by ID (full replacement)
      description: Replaces the entire task resource. Clients should send a complete representation.
      operationId: updateTask
      parameters:
        - name: id
          in: path
          description: ID of the task to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDTO'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - Task
      summary: Partially update task by ID
      description: Applies a partial update. Only provided fields will be changed.
      operationId: patchTask
      parameters:
        - name: id
          in: path
          description: ID of the task to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDTO'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Task
      summary: Delete task by ID
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of the task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          $ref: '#/components/responses/TaskNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User registered successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/UsernameAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Sign in with username and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Signed in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TaskNotFound:
      description: Task not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication failed or user not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UsernameAlreadyExists:
      description: Username already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    UserRequestDTO:
      type: object
      required:
        - name
        - lastName
        - username
        - password
      properties:
        name:
          type: string
          pattern: ".*\\S+.*"
          description: User's first name
        lastName:
          type: string
          pattern: ".*\\S+.*"
          description: User's last name
        username:
          type: string
          pattern: ".*\\S+.*"
          description: User's username
        password:
          type: string
          description: User's password
          format: password

    UserResponseDTO:
      type: object
      required:
        - id
        - name
        - lastName
        - username
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        username:
          type: string
          description: User's username

    TaskDTO:
      type: object
      required:
        - title
        - description
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          pattern: ".*\\S+.*"
        description:
          type: string
          pattern: ".*\\S+.*"
        completed:
          type: boolean
        date:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64

    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          pattern: ".*\\S+.*"
          description: User's username
        password:
          type: string
          format: password
          description: User's password

    LoginResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: Access token (e.g., Bearer JWT)
        user:
          $ref: '#/components/schemas/UserResponseDTO'

    UserUpdateDTO:
      type: object
      description: Fields for partial user updates. All properties are optional; only provided fields will be updated.
      properties:
        name:
          type: string
          pattern: ".*\\S+.*"
          description: User's first name
        lastName:
          type: string
          pattern: ".*\\S+.*"
          description: User's last name
        username:
          type: string
          pattern: ".*\\S+.*"
          description: User's username
        password:
          type: string
          format: password
          description: User's password

    TaskUpdateDTO:
      type: object
      description: Fields for partial task updates. All properties are optional; only provided fields will be updated.
      properties:
        title:
          type: string
          pattern: ".*\\S+.*"
        description:
          type: string
          pattern: ".*\\S+.*"
        completed:
          type: boolean
        date:
          type: string
          format: date-time